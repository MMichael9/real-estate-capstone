// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require("./Verifier");
var proof = require('../../zokrates/code/square/proof.json');

contract('TestSquareVerifier', accounts => {

    const account_one = accounts[0];
    let verified = false;
    let failVerified = true;

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    describe('test correct and incorrect proofs', function () {

        beforeEach(async function () {
            this.contract = await verifier.new({from: account_one});
        });

        it('tests using correct proof', async function () {
            verified = await this.contract.verifyTx(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs , {from:account_one});
            assert.equal(verified, true, "failed verification");
        });


        it('tests using incorrect proof', async function () {

            let failedInput = [
                "0x0000000000000000000000000000000000000000000000000000000000000008",
                "0x0000000000000000000000000000000000000000000000000000000000000002"
            ]

            failVerified = await this.contract.verifyTx(proof.proof.a, proof.proof.b, proof.proof.c, failedInput , {from:account_one});
            assert.equal(failVerified, false, "passed verification");
        });

    })

});